name: CI/CD Pipeline

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'src-code/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./src-code
      
    - name: Run type checking
      run: npx tsc --noEmit
      working-directory: ./src-code
      
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      working-directory: ./src-code
      
    - name: Build application
      run: npm run build
      working-directory: ./src-code
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'src-code/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./src-code
      
    - name: Build application
      run: npm run build
      working-directory: ./src-code
      
    - name: Start application
      run: npm start &
      working-directory: ./src-code
      
    - name: Wait for server
      run: npx wait-on http://localhost:3000
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'src-code/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./src-code
      
    - name: Run security audit
      run: npm audit --audit-level=high
      working-directory: ./src-code
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --config audit-ci.json
      working-directory: ./src-code

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'src-code/package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./src-code
      
    - name: Build application
      run: npm run build
      working-directory: ./src-code
      
    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        working-directory: ./src-code